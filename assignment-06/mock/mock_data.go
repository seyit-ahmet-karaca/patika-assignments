// Code generated by MockGen. DO NOT EDIT.
// Source: .\data\data.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIData is a mock of IData interface.
type MockIData struct {
	ctrl     *gomock.Controller
	recorder *MockIDataMockRecorder
}

// MockIDataMockRecorder is the mock recorder for MockIData.
type MockIDataMockRecorder struct {
	mock *MockIData
}

// NewMockIData creates a new mock instance.
func NewMockIData(ctrl *gomock.Controller) *MockIData {
	mock := &MockIData{ctrl: ctrl}
	mock.recorder = &MockIDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIData) EXPECT() *MockIDataMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIData) GetAll() map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIDataMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIData)(nil).GetAll))
}

// GetByUsername mocks base method.
func (m *MockIData) GetByUsername(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIDataMockRecorder) GetByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIData)(nil).GetByUsername), username)
}

// Insert mocks base method.
func (m *MockIData) Insert(username string, balance int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", username, balance)
}

// Insert indicates an expected call of Insert.
func (mr *MockIDataMockRecorder) Insert(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIData)(nil).Insert), username, balance)
}

// Update mocks base method.
func (m *MockIData) Update(username string, balance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", username, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDataMockRecorder) Update(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIData)(nil).Update), username, balance)
}
